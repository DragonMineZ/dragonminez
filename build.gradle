buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '6.0.30'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.38'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java {
    withSourcesJar()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, " +
        "JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), " +
        "Arch: ${System.getProperty 'os.arch'}"

mixin {
    add sourceSets.main, 'mixins.dragonminez.refmap.json'

    config 'mixin.core_client.json'
    config 'mixin.core_server.json'
    config 'mixin.core_common.json'

    config 'mixin.mod_client.json'
    config 'mixin.mod_server.json'
    config 'mixin.mod_common.json'

    debug.verbose = true
    debug.export = true
    quiet
}

tasks.jarJar.configure {
    it.archiveClassifier.set("")
    finalizedBy("reobfJarJar")
}

tasks.jar.configure {
    it.archiveClassifier.set("slim")
}

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://cursemaven.com"
    }
    mavenCentral()
}

minecraft {
    jarJar.enable()
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.logging.console.level', 'debug'
        }
        server {
            property 'forge.logging.console.level', 'debug'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

dependencies {
    // Minecraft Libraries
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.7:processor'

    // Corrects vulnerable libraries on Forge's core.
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'io.netty:netty-codec:4.2.0.Final'
    implementation 'io.netty:netty-handler:4.2.0.Final'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    minecraftLibrary jarJar("com.fasterxml.jackson.core:jackson-databind:2.18.3"), {
        jarJar.ranged(it, "[2.18.3,)")
    }

    // Development Libraries
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.20.1:4.7.1.2')
    implementation 'com.eliotlash.mclib:mclib:20'
    implementation fg.deobf('com.github.glitchfiend:TerraBlender-forge:1.20.1-3.0.1.7')

    // Dev-Env only mods
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    compileOnly(fg.deobf("org.embeddedt:embeddium-1.20.1:0.3.9-git.f603a93+mc1.20.1"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    runtimeOnly(fg.deobf("org.embeddedt:embeddium-1.20.1:0.3.9-git.f603a93+mc1.20.1"))
    runtimeOnly(fg.deobf("curse.maven:worldedit-225608:4586218"))
    runtimeOnly(fg.deobf("curse.maven:cyanide-541676:5778405"))
}

sourceSets.main.resources { srcDir 'src/generated/resources/' }

tasks.named('processResources', ProcessResources) {
    var replaceProperties = [
            minecraft_version         : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version             : forge_version, forge_version_range: forge_version_range,
            loader_version_range      : loader_version_range,
            mod_id                    : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors               : mod_authors, mod_description: mod_description,
            geckolib_version_range    : geckolib_version_range,
            terrablender_version_range: terrablender_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}